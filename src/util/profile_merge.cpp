/*
 * profile_merge.cpp
 *
 *  Created on: Oct 22, 2014
 *      Author: njindal
 */


#include "config.h"
#include "profile_timer.h"
#include "profile_timer_store.h"
#include "sip_mpi_attr.h"
#include "rank_distribution.h"
#include <unistd.h>
#include <utility>
#include <algorithm>
#include <map>
#include <iostream>
#include <string>

#ifdef _OPENMP
#include <omp.h>
#endif

void print_usage(const std::string& program_name) {
	std::cerr << "Merges sqlite profile databases generated by aces4_profile"
			<< std::endl;
	std::cerr << "Usage : " << program_name
			<< " -o <name of output file> <space separated list of profile databases>"
			<< std::endl;
	std::cerr << "\tDefault output file is \"profile.db\"" << std::endl;
	std::cerr << "\t-? or -h to display this usage dialogue" << std::endl;
}


// Merges the profiles in the current directory.
// The arguments to the program are
// 1. The profiles to be merged and
// 2. The name of output merged file

int main(int argc, char* argv[]) {


#ifdef HAVE_MPI
	/* MPI Initialization */
	MPI_Init(&argc, &argv);
	// Since this executable need not be run with servers
	// or with 2 ranks, all ranks are made to be workers.
	sip::AllWorkerRankDistribution all_workers_rank_dist;
	sip::SIPMPIAttr::set_rank_distribution(&all_workers_rank_dist);
#endif

	if (argc < 1){
		std::string program_name(argv[0]);
		print_usage(program_name);
		return 1;
	}


	// Parse command line arguments
	char * output_file = "profile.db";
	/**
	 * o : output file
	 */
	const char *optString = "o:h";
	int c;
	while ((c = getopt(argc, argv, optString)) != -1){
		switch (c) {
		case 'o':
			output_file = optarg;
			break;
		case 'h':
		default:
			std::string program_name(argv[0]);
			print_usage(program_name);
			return 1;
		}
	}

	std::string output_db_name(output_file);
	sip::ProfileTimerStore output_db(":memory:");

// OpenMP Merge
#ifdef _OPENMP
	int num_threads = omp_get_num_threads();
	std::vector<sip::ProfileTimerStore*> profile_timer_stores(num_threads, NULL);
	for (int i=0; i<num_threads; ++i)
		profile_timer_stores[i] = new sip::ProfileTimerStore(":memory:");

#pragma omp parallel for
	for (int i=1; i<argc; ++i){
		std::string db_name(argv[i]);
		std::cout << "Now merging " << db_name << std::endl;
		sip::ProfileTimerStore db_on_disk(db_name);
		sip::ProfileTimerStore db_in_memory(":memory:");
		db_on_disk.backup_to_other(db_in_memory);
		profile_timer_stores[omp_get_thread_num()]->merge_from_other(db_in_memory);
	}

	for (int i=0; i<num_threads; ++i){
		output_db.merge_from_other(*(profile_timer_stores[i]));
	}

#else // _OPENMP
	// SERIAL Merge
	for(int i=1; i<argc; ++i){
		std::string db_name(argv[i]);
		std::cout << "Now merging " << db_name << std::endl;
		sip::ProfileTimerStore db_on_disk(db_name);
		sip::ProfileTimerStore db_in_memory(":memory:");
		db_on_disk.backup_to_other(db_in_memory);
		output_db.merge_from_other(db_in_memory);
	}
#endif

	// Save the in memory data base to file
	sip::ProfileTimerStore output_disk_profile_timer(output_db_name);
	output_db.backup_to_other(output_disk_profile_timer);


#ifdef HAVE_MPI
	MPI_Finalize();
#endif


	return 0;
}

